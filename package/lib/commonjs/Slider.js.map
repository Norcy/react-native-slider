{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_RNCSliderNativeComponent","obj","__esModule","default","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","LIMIT_MIN_VALUE","Number","MIN_SAFE_INTEGER","LIMIT_MAX_VALUE","MAX_SAFE_INTEGER","SliderComponent","props","forwardedRef","_props$accessibilityS","style","StyleSheet","compose","styles","slider","onValueChange","onSlidingStart","onSlidingComplete","onAccessibilityAction","localProps","onValueChangeEvent","event","nativeEvent","value","_disabled","disabled","accessibilityState","_accessibilityState","onSlidingStartEvent","onSlidingCompleteEvent","onAccessibilityActionEvent","lowerLimit","upperLimit","createElement","thumbImage","Platform","OS","Image","resolveAssetSource","undefined","onChange","onRNCSliderSlidingStart","onRNCSliderSlidingComplete","onRNCSliderValueChange","onStartShouldSetResponder","onResponderTerminationRequest","SliderWithRef","React","forwardRef","defaultProps","minimumValue","maximumValue","step","inverted","tapToSeek","create","height","_default","exports"],"sources":["Slider.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Image,\n  Platform,\n  StyleSheet,\n  AccessibilityActionEvent,\n  ViewProps,\n  ViewStyle,\n  ColorValue,\n  NativeSyntheticEvent,\n  StyleProp,\n} from 'react-native';\nimport RCTSliderNativeComponent from './RNCSliderNativeComponent';\n//@ts-ignore\nimport type {ImageSource} from 'react-native/Libraries/Image/ImageSource';\n\nimport type {Ref} from 'react';\n\nconst LIMIT_MIN_VALUE = Number.MIN_SAFE_INTEGER;\nconst LIMIT_MAX_VALUE = Number.MAX_SAFE_INTEGER;\n\ntype Event = NativeSyntheticEvent<\n  Readonly<{\n    value: number;\n    /**\n     * Android Only.\n     */\n    fromUser?: boolean;\n  }>\n>;\n\ntype WindowsProps = Readonly<{\n  /**\n   * If true the slider will be inverted.\n   * Default value is false.\n   */\n  vertical?: boolean;\n}>;\n\ntype IOSProps = Readonly<{\n  /**\n   * Assigns a single image for the track. Only static images are supported.\n   * The center pixel of the image will be stretched to fill the track.\n   */\n  trackImage?: ImageSource;\n\n  /**\n   * Assigns a minimum track image. Only static images are supported. The\n   * rightmost pixel of the image will be stretched to fill the track.\n   */\n  minimumTrackImage?: ImageSource;\n\n  /**\n   * Assigns a maximum track image. Only static images are supported. The\n   * leftmost pixel of the image will be stretched to fill the track.\n   */\n  maximumTrackImage?: ImageSource;\n\n  /**\n   * Permits tapping on the slider track to set the thumb position.\n   * Defaults to false on iOS. No effect on Android or Windows.\n   */\n  tapToSeek?: boolean;\n}>;\n\ntype Props = ViewProps &\n  IOSProps &\n  WindowsProps &\n  Readonly<{\n    /**\n     * Used to style and layout the `Slider`.  See `StyleSheet.js` and\n     * `DeprecatedViewStylePropTypes.js` for more info.\n     */\n    style?: StyleProp<ViewStyle>;\n\n    /**\n     * Write-only property representing the value of the slider.\n     * Can be used to programmatically control the position of the thumb.\n     * Entered once at the beginning still acts as an initial value.\n     * The value should be between minimumValue and maximumValue,\n     * which default to 0 and 1 respectively.\n     * Default value is 0.\n     *\n     * This is not a controlled component, you don't need to update the\n     * value during dragging.\n     */\n    value?: number;\n\n    /**\n     * Step value of the slider. The value should be\n     * between 0 and (maximumValue - minimumValue).\n     * Default value is 0.\n     */\n    step?: number;\n\n    /**\n     * Initial minimum value of the slider. Default value is 0.\n     */\n    minimumValue?: number;\n\n    /**\n     * Initial maximum value of the slider. Default value is 1.\n     */\n    maximumValue?: number;\n\n    /**\n     * The lower limit value of the slider. The user won't be able to slide below this limit.\n     */\n    lowerLimit?: number;\n\n    /**\n     * The upper limit value of the slider. The user won't be able to slide above this limit.\n     */\n    upperLimit?: number;\n\n    /**\n     * The color used for the track to the left of the button.\n     * Overrides the default blue gradient image on iOS.\n     */\n    minimumTrackTintColor?: ColorValue;\n\n    /**\n     * The color used for the track to the right of the button.\n     * Overrides the default blue gradient image on iOS.\n     */\n    maximumTrackTintColor?: ColorValue;\n    /**\n     * The color used to tint the default thumb images on iOS, or the\n     * color of the foreground switch grip on Android.\n     */\n    thumbTintColor?: ColorValue;\n\n    /**\n     * If true the user won't be able to move the slider.\n     * Default value is false.\n     */\n    disabled?: boolean;\n\n    /**\n     * Callback continuously called while the user is dragging the slider.\n     */\n    onValueChange?: (value: number) => void;\n\n    /**\n     * Callback that is called when the user touches the slider,\n     * regardless if the value has changed. The current value is passed\n     * as an argument to the callback handler.\n     */\n    onSlidingStart?: (value: number) => void;\n\n    /**\n     * Callback that is called when the user releases the slider,\n     * regardless if the value has changed. The current value is passed\n     * as an argument to the callback handler.\n     */\n    onSlidingComplete?: (value: number) => void;\n\n    /**\n     * Used to locate this view in UI automation tests.\n     */\n    testID?: string;\n\n    /**\n     * Sets an image for the thumb. Only static images are supported.\n     */\n    thumbImage?: ImageSource;\n\n    /**\n     * If true the slider will be inverted.\n     * Default value is false.\n     */\n    inverted?: boolean;\n\n    /**\n     * A string of one or more words to be announced by the screen reader.\n     * Otherwise, it will announce the value as a percentage.\n     * Requires passing a value to `accessibilityIncrements` to work correctly.\n     * Should be a plural word, as singular units will be handled.\n     */\n    accessibilityUnits?: string;\n\n    /**\n     * An array of values that represent the different increments displayed\n     * by the slider. All the values passed into this prop must be strings.\n     * Requires passing a value to `accessibilityUnits` to work correctly.\n     * The number of elements must be the same as `maximumValue`.\n     */\n    accessibilityIncrements?: Array<string>;\n  }>;\n\nconst SliderComponent = (\n  props: Props,\n  forwardedRef?: Ref<typeof RCTSliderNativeComponent>,\n) => {\n  const style = StyleSheet.compose(props.style, styles.slider);\n\n  const {\n    onValueChange,\n    onSlidingStart,\n    onSlidingComplete,\n    onAccessibilityAction,\n    ...localProps\n  } = props;\n\n  const onValueChangeEvent = onValueChange\n    ? (event: Event) => {\n        onValueChange(event.nativeEvent.value);\n      }\n    : () => {};\n\n  const _disabled =\n    typeof props.disabled === 'boolean'\n      ? props.disabled\n      : props.accessibilityState?.disabled === true;\n\n  const _accessibilityState =\n    typeof props.disabled === 'boolean'\n      ? {...props.accessibilityState, disabled: props.disabled}\n      : props.accessibilityState;\n\n  const onSlidingStartEvent = onSlidingStart\n    ? (event: Event) => {\n        onSlidingStart(event.nativeEvent.value);\n      }\n    : () => {};\n  const onSlidingCompleteEvent = onSlidingComplete\n    ? (event: Event) => {\n        onSlidingComplete(event.nativeEvent.value);\n      }\n    : () => {};\n  const onAccessibilityActionEvent = onAccessibilityAction\n    ? (event: AccessibilityActionEvent) => {\n        onAccessibilityAction(event);\n      }\n    : () => {};\n\n  const lowerLimit =\n    !!localProps.lowerLimit || localProps.lowerLimit === 0\n      ? localProps.lowerLimit\n      : LIMIT_MIN_VALUE;\n\n  const upperLimit =\n    !!localProps.upperLimit || localProps.upperLimit === 0\n      ? localProps.upperLimit\n      : LIMIT_MAX_VALUE;\n\n  return (\n    <RCTSliderNativeComponent\n      {...localProps}\n      lowerLimit={lowerLimit}\n      upperLimit={upperLimit}\n      accessibilityState={_accessibilityState}\n      thumbImage={\n        Platform.OS === 'web'\n          ? props.thumbImage\n          : props.thumbImage\n          ? Image.resolveAssetSource(props.thumbImage)\n          : undefined\n      }\n      // ref={forwardedRef}\n      style={style}\n      onChange={onValueChangeEvent}\n      onRNCSliderSlidingStart={onSlidingStartEvent}\n      onRNCSliderSlidingComplete={onSlidingCompleteEvent}\n      onRNCSliderValueChange={onValueChangeEvent}\n      disabled={_disabled}\n      onStartShouldSetResponder={() => true}\n      onResponderTerminationRequest={() => false}\n    />\n  );\n};\n\nconst SliderWithRef = React.forwardRef(SliderComponent);\n\nSliderWithRef.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  inverted: false,\n  tapToSeek: false,\n  lowerLimit: LIMIT_MIN_VALUE,\n  upperLimit: LIMIT_MAX_VALUE,\n};\n\nlet styles = StyleSheet.create(\n  Platform.OS === 'ios' ? {slider: {height: 40}} : {slider: {}},\n);\n\nexport default SliderWithRef;\n"],"mappings":"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"}